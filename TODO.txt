-- Frontend Tasks --
UI Design:

	Create wireframes and mockups for the user interface.
	Design layout, color scheme, and typography.
	Decide on the structure of forms or input fields for data manipulation operations.



Frontend Development:

	Set up the frontend project using a framework like React, Vue.js, Angular, or plain HTML/CSS/JavaScript.
	Implement UI components based on the design specifications.
	Implement forms or input fields for inserting, deleting, and modifying data.
	Implement event handlers for user interactions (e.g., button clicks, form submissions).
	Implement client-side validation for user input.


Integration with Backend:

	Define API endpoints that the frontend will communicate with.
	Implement functions or methods to make HTTP requests to backend endpoints using libraries like Axios or Fetch API.
	Handle responses from the backend and update the UI accordingly.


-- Backend Tasks --
Backend Setup: [DONE - Kelly]

	Choose a backend framework (e.g., Flask, FastAPI, Django) and set up the project.
	Install necessary dependencies and configure the environment.

Database Setup: [DONE - Kelly]

	Choose the database system (e.g., PostgreSQL, MySQL, MongoDB, Firebase Firestore) and set up the database.
	Design the database schema based on the application's data model.

API Development: [50% - Cliff]

	Define RESTful API endpoints for CRUD operations (e.g., GET /items, POST /items, PUT /items/{id}, DELETE /items/{id}).
	Implement request handlers for each endpoint to handle incoming requests, process data, and interact with the database.
	Implement authentication middleware to protect endpoints that require authentication.

Authentication and Authorization: [NOT NEEDED?]

	Implement user authentication mechanisms (e.g., username/password, OAuth, JWT).
	Implement authorization logic to enforce access control rules and permissions.

-- General Tasks --:
Testing:

	Write unit tests and integration tests for frontend and backend components.
	Perform manual testing to ensure the application functions correctly and meets the requirements.






NICE TO HAVE:
- order by for aggregate functions 
- dynamic fields for update (i.e. remove filt_type and old_val when using name update)